<?xml version="1.0" encoding="utf-8"?>
<template>
	<name>controller</name>
	<filePath>/src/main/java/${packageName}/${moduleName}/web/${subModuleName}</filePath>
	<fileName>${ClassName}Controller.java</fileName>
	<content><![CDATA[
package ${packageName}.${moduleName}.web<#if subModuleName != "">.${subModuleName}</#if>;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.thinkgem.jeesite.common.bean.Ret;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import com.thinkgem.jeesite.common.persistence.Page;
import com.thinkgem.jeesite.common.web.BaseController;
import ${packageName}.${moduleName}.entity<#if subModuleName != "">.${subModuleName}</#if>.${ClassName};
import ${packageName}.${moduleName}.service<#if subModuleName != "">.${subModuleName}</#if>.${ClassName}Service;

/**
 * ${functionName}Controller
 * @author ${functionAuthor}
 * @version ${functionVersion}
 * 尚渝网络
 */
@Controller
@RequestMapping(value = "${r"${adminPath}"}/${urlPrefix}")
public class ${ClassName}Controller extends BaseController {

	@Autowired
	private ${ClassName}Service ${className}Service;

	@RequiresPermissions("${permissionPrefix}:edit")
	@RequestMapping(value = "save")
	@ResponseBody
	public String save(@RequestParam(required = true) String json) {

		 ${ClassName} ${className}=gson.fromJson(json, ${ClassName}.class);

		beanValidator(${className});
	
		${className}Service.save(${className});

	    return new Ret(0,MsgSuccess).putMap("data",${className}).toString();
	}
	@RequiresPermissions("${permissionPrefix}:delete")
	@RequestMapping(value = "delete")
	@ResponseBody
	public String delete(@RequestParam(required = true) String json) {

		String[] ids=gson.fromJson(json,String[].class);

		if(ids==null||ids.length==0){
			return new Ret(1, MsgReqNotNull).toString();
		}
		${className}Service.deleteByIds(ids);
		return new Ret(0, MsgDeleteSuccess).toString();
	}


	@RequiresPermissions("${permissionPrefix}:view")
	@RequestMapping(value = {"list"})
	@ResponseBody
	public String list(${ClassName} ${className}, HttpServletRequest request, HttpServletResponse response) {
		Page<${ClassName}> page = ${className}Service.findPage(new Page<${ClassName}>(request, response), ${className});
		return new Ret("data",page).toString();
	}
	@RequiresPermissions("${permissionPrefix}:view")
	@RequestMapping(value = {"getById"})
	@ResponseBody
	public String getById(@RequestParam(required = true) String id) {

	    ${ClassName} ${className} = ${className}Service.get(id);
		if(${className}==null){
			return new Ret(1,MsgDataNotFinad).toString();
		}
		return new Ret("data",${className}).toString();
	}
    /*
     * 对应table=${table.name}
     **/
	private final static String dataBaseId ="${table.id}";
	@RequiresPermissions("user")
	@RequestMapping(value = {"config"})
	@ResponseBody
	public String config(){
		return new Ret("data",super.getDataBaseConfig(dataBaseId)).toString();
	}
}]]>
	</content>
</template>