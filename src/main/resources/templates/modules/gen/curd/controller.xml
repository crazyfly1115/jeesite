<?xml version="1.0" encoding="utf-8"?>
<template>
	<name>controller</name>
	<filePath>/src/${packageName}/${moduleName}/web/${subModuleName}</filePath>
	<fileName>${ClassName}Controller.java</fileName>
	<content><![CDATA[
/**
 * 重庆尚渝网络
 */
package ${packageName}.${moduleName}.web<#if subModuleName != "">.${subModuleName}</#if>;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.commons.lang3.StringEscapeUtils;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import java.util.Map;
import com.thinkgem.jeesite.common.config.Global;
import com.thinkgem.jeesite.common.persistence.DataEntity;
import com.thinkgem.jeesite.common.persistence.Page;
import com.thinkgem.jeesite.common.persistence.Ret;
import com.thinkgem.jeesite.common.web.BaseController;
import com.thinkgem.jeesite.common.utils.StringUtils;
import com.thinkgem.jeesite.modules.sys.utils.UserUtils;
import com.thinkgem.jeesite.modules.eam.entity.base.Many;
import ${packageName}.${moduleName}.entity<#if subModuleName != "">.${subModuleName}</#if>.${ClassName};
import ${packageName}.${moduleName}.service<#if subModuleName != "">.${subModuleName}</#if>.${ClassName}Service;

/**
 * ${functionName}Controller
 * @author ${functionAuthor}
 * @version ${functionVersion}
 */
@Controller
@RequestMapping(value = "${r"${adminPath}"}/${urlPrefix}")
public class ${ClassName}Controller extends BaseController {

	@Autowired
	private ${ClassName}Service ${className}Service;

	@RequiresPermissions("${permissionPrefix}:edit")
	@RequestMapping(value = "save")
	@ResponseBody
	public String save(@RequestParam(required=true) String json, Model model, RedirectAttributes redirectAttributes) {
		${ClassName} ${className}=null;
		Map<String, Object> data = null;
		if (StringUtils.isNotBlank(json)){
				json=StringEscapeUtils.unescapeHtml4(json);
				${className}=gson.fromJson(json, ${ClassName}.class);
				data = gson.fromJson(json, Map.class);

		}
		${className}.setDelFlag(DataEntity.DEL_FLAG_NORMAL);
		if (!beanValidator(model, ${className})){
			return new Ret(1, model.asMap().get("message").toString()).toString();
		}

	     return new Ret(0, "保存${functionNameSimple}成功").toString();
	}
	@RequiresPermissions("${permissionPrefix}:delete")
	@RequestMapping(value = "deleteAjax")
	@ResponseBody
	public String deleteAjax(@RequestParam("ids[]") String[] ids, RedirectAttributes redirectAttributes) {
		if(ids==null||ids.length==0){
			return new Ret(1, "ids为空,无数据").toString();
		}
		for (String id : ids) {
			${className}Service.deleteById(id);
		}
		return new Ret(0, "删除成功").toString();
	}
	@RequiresPermissions("${permissionPrefix}:view")
	@RequestMapping(value = {"listView", ""})
	public String listView(){
		return "${lastPackageName}/${viewPrefix}ListView";
	}
	@RequiresPermissions("${permissionPrefix}:view")
	@RequestMapping(value = {"ListManyView", ""})
	public String ListManyView(String menu,Model model,HttpServletRequest request){
		String[] titleDes=new String[]{"实体表","版本","更新时间"};
		String[] Des=new String[]{"{{item.name}}","{{item.version}}","{{item.updateDate}}"};
		Many many = new Many(menu, "${genSchemeId}","描述:{{item.comments}}",titleDes,Des);
		many.addPermissions("${permissionPrefix}:edit");
		many.addPermissions("${permissionPrefix}:view");
		many.addPermissions("${permissionPrefix}:delete");
		many.addPermissions("${permissionPrefix}:process");
		return super.ListManyView(many, model, request);
	}
	@RequiresPermissions("${permissionPrefix}:view")
	@RequestMapping(value = {"editView", ""})
	public String editView(HttpServletRequest request){
		Many many = new Many();
		many.setGenSchemeId("${genSchemeId}");
		listTabNotDefulat(many,request);
		return "modules/eam/base/input";
	}
	@RequiresPermissions("${permissionPrefix}:view")
	@RequestMapping(value = {"data", ""})
	@ResponseBody
	public String data(${ClassName} ${className}, HttpServletRequest request, HttpServletResponse response, Model model) {
		Page<${ClassName}> page = ${className}Service.findPage(new Page<${ClassName}>(request, response), ${className});
		return new Ret("data",page).toString();
	}
	@RequiresPermissions("${permissionPrefix}:view")
	@RequestMapping(value = {"getById", ""})
	@ResponseBody
	public String getById(${ClassName} ${className}, HttpServletRequest request, HttpServletResponse response, Model model) {
		if(${className}==null){
			return new Ret(1, "未查询到数据").toString();
		}
		return new Ret("data",${className}).toString();
	}
}]]>
	</content>
</template>